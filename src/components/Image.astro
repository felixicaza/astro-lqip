---
import type { LocalImageProps, RemoteImageProps } from 'astro:assets'
import type { HTMLAttributes } from 'astro/types'
import type { Props as LqipProps, SVGNode } from '../types'

import { PREFIX } from '../constants'

import { resolveImagePath } from '../utils/resolveImagePath'
import { renderSVGNode } from '../utils/renderSVGNode'
import { getLqipStyle } from '../utils/getLqipStyle'
import { getLqip } from '../utils/getLqip'

import { Image as ImageComponent } from 'astro:assets'

import '../styles/lqip.css'

type Props = (LocalImageProps | RemoteImageProps) & LqipProps & {
  parentAttributes?: HTMLAttributes<'div'>
}

const { class: className, lqip = 'base64', lqipSize = 4, parentAttributes = {}, ...props } = Astro.props as Props

const isDevelopment = import.meta.env.MODE === 'development'

let getImagePath: string | { src: string } | null

if (typeof props.src === 'string') {
  getImagePath = props.src
} else if (typeof props.src === 'object' && props.src !== null) {
  getImagePath = await resolveImagePath(props.src as unknown as string)
} else {
  getImagePath = null
}

let lqipImage
if (getImagePath) {
  const lqipInput = typeof getImagePath === 'string' ? { src: getImagePath } : getImagePath
  lqipImage = await getLqip(lqipInput, isDevelopment, lqip, lqipSize)
}

let svgHTML = ''

if (lqip === 'svg' && Array.isArray(lqipImage)) {
  svgHTML = renderSVGNode(lqipImage as unknown as SVGNode)
}

const lqipStyle = getLqipStyle(lqip, lqipImage, svgHTML)

const forbiddenVars = ['--lqip-background', '--z-index', '--opacity']
const styleProps = parentAttributes.style ?? {}

for (const key of Object.keys(styleProps)) {
  if (forbiddenVars.includes(key)) {
    console.warn(
      `${PREFIX} The CSS variable “${key}” should not be passed in \`parentAttributes.style\` because it can override the functionality of LQIP.`
    )
  }
}

const combinedStyle = {
  ...styleProps,
  ...lqipStyle
}

const combinedParentAttributes = {
  ...parentAttributes,
  style: combinedStyle
}
---

<div class={className} data-astro-lqip {...combinedParentAttributes}>
  <ImageComponent
    {...props}
    class={className}
    onload="parentElement.style.setProperty('--z-index', 1), parentElement.style.setProperty('--opacity', 0)"
  />
</div>
