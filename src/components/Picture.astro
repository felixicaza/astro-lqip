---
import type { Props as AstroPictureProps } from 'astro/components/Picture.astro'
import type { Props as LqipProps } from '../types'

import { useLqipImage } from '../utils/useLqipImage'

import { Picture as PictureComponent } from 'astro:assets'

import '../styles/lqip.css'

type Props = AstroPictureProps & LqipProps

const { class: className, lqip = 'base64', lqipSize = 4, pictureAttributes = {}, ...props } = Astro.props as Props

const isDevelopment = import.meta.env.MODE === 'development'
const isPrerendered = Astro.isPrerendered

const { combinedStyle, resolvedSrc } = await useLqipImage({
  src: props.src,
  lqip,
  lqipSize,
  styleProps: (pictureAttributes.style ?? {}) as Record<string, string | number | undefined>,
  forbiddenVars: [],
  isDevelopment,
  isPrerendered
})

const componentProps = {
  ...props,
  src: resolvedSrc ?? props.src
}
const combinedPictureAttributes = {
  ...pictureAttributes,
  style: combinedStyle
}
---

<PictureComponent
  {...(componentProps as AstroPictureProps)}
  class={className}
  pictureAttributes={{ 'data-astro-lqip': '', ...combinedPictureAttributes }}
  onload="parentElement.style.setProperty('--z-index', 1), parentElement.style.setProperty('--opacity', 0)"
/>
