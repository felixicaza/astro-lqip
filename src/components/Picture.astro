---
import type { Props } from '../types'

import { PREFIX } from '../constants'

import { resolveImageMetadata } from '../utils/resolveImageMetadata'
import { renderSVGNode } from '../utils/renderSVGNode'
import { getLqipStyle } from '../utils/getLqipStyle'
import { getLqip } from '../utils/getLqip'

import { Picture as PictureComponent } from 'astro:assets'

const { class: className, lqip = 'base64', lqipSize = 4, pictureAttributes = {}, ...props } = Astro.props as Props

const isDevelopment = import.meta.env.MODE === 'development'

const imageMetadata = await resolveImageMetadata(props.src)
const lqipImage = await getLqip(imageMetadata, isDevelopment, lqip, lqipSize)

let svgHTML = ''

if (lqip === 'svg' && Array.isArray(lqipImage)) {
  svgHTML = renderSVGNode(lqipImage as [string, Record<string, any>, any[]])
}

const lqipStyle = getLqipStyle(lqip, lqipImage, svgHTML)

const forbiddenVars = ['--lqip-background', '--z-index', '--opacity']
const styleProps = pictureAttributes.style ?? {}

for (const key of Object.keys(styleProps)) {
  if (forbiddenVars.includes(key)) {
    console.warn(
      `${PREFIX} The CSS variable “${key}” should not be passed in \`pictureAttributes.style\` because it can override the functionality of LQIP.`
    )
  }
}

const combinedStyle = {
  ...styleProps,
  ...lqipStyle
}

const combinedPictureAttributes = {
  ...pictureAttributes,
  style: combinedStyle
}
---

<style is:inline>
  picture {
    --opacity: 1;
    --z-index: 0;

    position: relative;
    display: inline-block;
  }

  picture::after {
    content: "";
    inset: 0;
    width: 100%;
    height: 100%;
    position: absolute;
    pointer-events: none;
    transition: opacity 1s;
    opacity: var(--opacity);
    z-index: var(--z-index);
    background: var(--lqip-background);
    background-size: cover;
    background-position: 50% 50%;
  }

  picture img {
    z-index: 1;
    position: relative;
    overflow: hidden;
  }
</style>

<PictureComponent
  {...props}
  class={className}
  pictureAttributes={{ ...combinedPictureAttributes }}
  onload="parentElement.style.setProperty('--z-index', 1), parentElement.style.setProperty('--opacity', 0)"
/>
