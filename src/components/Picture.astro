---
import { join } from 'node:path'
import { readFile } from 'node:fs/promises'

import { getPlaiceholder } from 'plaiceholder'

import { Picture as PictureComponent } from 'astro:assets'
import type { Props as PictureProps } from 'astro/components/Picture.astro'

type Props = PictureProps

const { class: className, ...props } = Astro.props as Props

const PREFIX = '[astro-lqip]'

const imageMetadata = await resolveImageMetadata(props.src)
const lqip = await getLqip(imageMetadata)

async function resolveImageMetadata(src: any) {
  if (typeof src === 'string') return null
  if ('then' in src && typeof src.then === 'function') return (await src).default
  if ('src' in src) return src
  return null
}

async function tryGenerateLqip(filePath: string, errorPrefix: string, isDevelopment: boolean) {
  try {
    const buffer = await readFile(filePath)
    const { base64 } = await getPlaiceholder(buffer)

    if (isDevelopment) {
      console.log(`${PREFIX} LQIP successfully generated!`)
    } else {
      console.log(`${PREFIX} LQIP successfully generated for:`, imageMetadata.src)
    }
    return base64
  } catch (err) {
    console.error(`${errorPrefix} Error generating LQIP in:`, filePath, '\n', err)
    return undefined
  }
}

async function getLqip(imageMetadata: any) {
  if (!imageMetadata?.src) return undefined

  const isDevelopment = import.meta.env.MODE === 'development'

  if (isDevelopment && imageMetadata.src.startsWith('/@fs/')) {
    const filePath = imageMetadata.src.replace(/^\/@fs/, '').split('?')[0]
    return await tryGenerateLqip(filePath, PREFIX, isDevelopment)
  }

  if (!isDevelopment && imageMetadata.src.startsWith('/_astro/')) {
    const buildPath = join(process.cwd(), 'dist', imageMetadata.src)
    return await tryGenerateLqip(buildPath, PREFIX, isDevelopment)
  }
}
---

<style is:inline>
  picture {
    --opacity: 1;
    --z-index: 0;

    position: relative;
    display: inline-block;
  }

  picture::after {
    content: "";
    inset: 0;
    width: 100%;
    height: 100%;
    position: absolute;
    pointer-events: none;
    transition: opacity 1s;
    opacity: var(--opacity);
    z-index: var(--z-index);
    background: var(--lqip-background);
    background-size: cover;
    background-position: 50% 50%;
  }

  picture img {
    z-index: 1;
    position: relative;
    overflow: hidden;
  }
</style>

<PictureComponent
  {...props}
  class={className}
  pictureAttributes={{ style: { '--lqip-background': `url('${lqip}')` } }}
  onload="parentElement.style.setProperty('--z-index', 1), parentElement.style.setProperty('--opacity', 0)"
/>
